 if STATE_CHANGING_METHOD == 1:
            # if the average of the index_DNA of the neighbours is higher than a threshold
            # then the agent becomes adapter; otherwise it's non adapter
            for label in LABELS:
                self.VL[label] = self.compute_average_index_DNA(neighbours)

        # if STATE_CHANGING_METHOD == 2:
        #     # finds the neighbour with the highest weight and check if its adapter or not
        #     highest_weight_neighbours = []
        #     max_weight = 0
        #
        #     for neighbour in list(neighbours):
        #         data = self.LPNet.get_edge_data(self.id, neighbour)
        #         weight = data['weight']
        #         if weight > max_weight:
        #             max_weight = weight
        #             highest_weight_neighbours = [neighbour]
        #         elif weight == max_weight:
        #             highest_weight_neighbours.append(neighbour)
        #
        #     avg_DNA = self.compute_average_index_DNA(neighbours)
        #     self.VL[label] = [0, 1] if avg_DNA >= DNA_THRESHOLD else 0
        #     self.state[label] = avg_DNA

        if STATE_CHANGING_METHOD == 3:
            # compute the average using the weight and whether they are adapter (+1) or non adapter(-1).
            # if avg > 0 and the agent is non adopter changes its state to adopter;
            # if avg < 0 and the agent is adopter changes its state to non adopter;
            # and then if avg =0 the agent keeps its opinion.
            # then compute the aggregation function:  w1 * my opinion + w2 * neighboursâ€™ opinion.
            for label in LABELS:
                sum_for_avg = 0
                neighbours_size = len(list(neighbours))
                for neighbour in list(neighbours):
                    data = self.LPNet.get_edge_data(self.id, neighbour)
                    weight = data.get('weight', 0)  # default value = 0 if it doesn't exist
                    node_state = self.LPNet.nodes[neighbour]["state"]
                    sum_for_avg += (weight * node_state)
                avg = float(sum_for_avg / neighbours_size)

                # AGGREGATION FUNCTION:
                agent_weight = float(1 / (neighbours_size + 1))
                neighbours_weight = agent_weight
                self.VL[label] = agent_weight * self.VL[label] + neighbours_weight * avg

        # if STATE_CHANGING_METHOD == 4:
        #     # sort the neighbours by weight, consider only n of them
        #     # if 50% adapter 50% non adapter -> the agent keeps its opinion
        #     # otherwise, the agent changes its opinion (MAJORITY RULE)
        #     weights = []
        #     for i, neighbour in enumerate(neighbours):
        #         data = self.LPNet.get_edge_data(self.id, neighbour)
        #         weights.append(data.get('weight', 0))  # default value = 0 if it doesn't exist
        #
        #     sorted_neighbours = [value for value, _ in
        #                          sorted(zip(neighbours, weights), key=lambda x: x[1], reverse=True)]
        #     neighbours_vls = [self.LPNet.nodes[neighbour][label] for neighbour in sorted_neighbours]
        #     self.VL[label] = apply_majority(neighbours_vls, self.VL[label])

